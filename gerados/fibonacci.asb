addi $lp $zero 461;
jmp 43;
//fibonacci
str $p1 $lp 1;
ldr $r1 $lp 1;
put $r2 1;
bne $r1 $r2 10;
put $r4 0;
mov $ret $r4 0;
jst;
jmp 10;
//L0
//L1
ldr $r5 $lp 1;
put $r6 2;
bne $r5 $r6 17;
put $r8 1;
mov $ret $r8 0;
jst;
jmp 17;
//L2
//L3
ldr $r9 $lp 2;
ldr $r10 $lp 1;
put $r11 2;
sub $r12 $r10 $r11;
mov $p1 $r12 0;
addi $lp $lp 3;
jal 2;
subi $lp $lp 3;
mov $r9 $ret 0;
str $r9 $lp 2;
ldr $r13 $lp 3;
ldr $r14 $lp 1;
put $r15 1;
sub $r16 $r14 $r15;
mov $p1 $r16 0;
addi $lp $lp 3;
jal 2;
subi $lp $lp 3;
mov $r13 $ret 0;
str $r13 $lp 3;
ldr $r17 $lp 2;
ldr $r18 $lp 3;
add $r19 $r17 $r18;
mov $ret $r19 0;
jst;
jst;
//main
ldr $zero $lp 1;
in $ret;
mov $zero $ret 0;
str $zero $lp 1;
ldr $r1 $lp 1;
put $r2 0;
bne $r1 $r2 57;
put $r4 100000;
mov $p1 $r4 0;
out $p1;
put $r5 0;
mov $ret $r5 0;
jmp 68;
jmp 57;
//L4
//L5
ldr $r6 $lp 1;
mov $p1 $r6 0;
addi $lp $lp 1;
jal 2;
subi $lp $lp 1;
mov $p1 $ret 0;
out $p1;
put $r7 0;
mov $ret $r7 0;
jmp 68;
jmp 68;
//end
hlt;
